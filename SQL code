WITH Purchase_and_CRM AS
 
(
   SELECT *,
    EXTRACT(MONTH FROM Date(install_date)) AS Install_month,  --Install month
    EXTRACT(MONTH FROM Date(orderDate)) AS Order_Month,       --Transaction month
    CASE                            
      WHEN promoId IS NOT NULL      
      AND (CAST(orderNumber as int64) = 1)
         THEN 'YES'
      ELSE 'NO'                     --Adding column Promo: if a purchase was made using promo  
    END
    AS Promo                     
  FROM 
    `realweb-152714.school22_project.af_purchase_events` AS af
  RIGHT JOIN 
    `school22_project.crm_data` AS crm
  ON 
    af.order_id = crm.orderID AND                     --Join on ID of transaction 
    Date(af.event_date) = Date(crm.orderDate)         --and date
  WHERE af.appsflyer_id IS NOT NULL
    AND af.install_date IS NOT NULL                   --Excluding NULL dates and ID of users
    AND af.event_date IS NOT NULL
    AND crm.orderDate IS NOT NULL
    AND Date(crm.orderDate) >= Date(af.install_date)  --Purchase date is not earlier than install date
 
),
 
 
Install_Cohort_Duplicates1 AS               -- Aggregating data on every user
 
(
  SELECT
    Install_month,
    event_date,
    appsflyer_id AS UserID,
    platform AS Platform,
    media_source AS Source,
    Promo
  FROM 
    Purchase_and_CRM
  WHERE platform IS NOT NULL
  AND media_source IS NOT NULL             --Not inclunding rows with NULL data of platform/source/promo
  AND Promo IS NOT NULL
),
 
Install_Cohort_Duplicates2 AS              -- Sorting users by install month cohorts
 
(
  SELECT
    MIN(Install_month) AS Cohort_Month,    -- Taking the earliest month of installation,  
    UserID,                                -- where more than one is present
    MIN(event_date) AS Event_Date,
    MAX(Promo) AS Promo                    -- max promo: I took the date with promo(YES),
  FROM                                     -- If there was two equal in the first month with and without promo
    Install_Cohort_Duplicates1
  GROUP BY UserID
  ORDER BY Cohort_Month, UserID 
),
 
Install_Cohort_Event_Date AS               -- Adding together date on cohorts and platforms/sources
 
(
  SELECT
    dup2.Cohort_Month,
    dup2.event_date,
    dup2.UserID,
    dup1.Platform,
    dup1.Source,
    dup2.Promo
  FROM 
    Install_Cohort_Duplicates2 AS dup2
  INNER JOIN Install_Cohort_Duplicates1 AS dup1
  ON dup1.UserID = dup2.UserID
    AND dup1.event_date = dup2.event_date
    AND dup1.Install_month = dup2.Cohort_Month
    AND dup1.Promo = dup2.Promo
  ORDER BY Cohort_Month, UserID
 
),
 
Install_Cohort_No_Duplicates AS            -- Excluding duplicate values
 
(
  SELECT 
    DISTINCT * 
  FROM
    Install_Cohort_Event_Date
),
 
Install_Cohort AS       -- Data about user, cohort and source
 
(
  SELECT               -- User ID/ Install month number/ Platform/ Source/ Promo (no duplicates)
    Cohort_Month,
    UserID,
    Platform,
    Source,
    Promo
  FROM 
    Install_Cohort_No_Duplicates
  ORDER BY Cohort_Month, UserID
 
),
 
Cohort_Size AS                              -- Cohort size
 
(
  SELECT
    Cohort_Month,
    Platform,
    Source,
    Promo,
    COUNT(1) AS Num_Users
  FROM 
    Install_Cohort
  GROUP BY Cohort_Month, Platform, Source, Promo 
  ORDER BY Cohort_Month, Platform, Source, Promo 
),
 
 
User_Activities_Mulitple_In_Month AS  --User activities (multiple transactions in one month)  
 
(
  SELECT               -- User ID/ Order month number/ Platform/ Source/ Promo
    inst.UserID,
    (pur.Order_Month - inst.Cohort_Month) AS Order_Month_Number,
    inst.Platform,
    inst.Source,
    inst.Promo
  FROM 
    Purchase_and_CRM AS pur
  INNER JOIN Install_Cohort AS inst
    ON inst.UserID = pur.appsflyer_id
  ORDER BY UserID, Order_Month_Number
),
 
 
User_Activities AS    --User activities ( if there is at least one transaction in a given month) 
 
(
  SELECT               -- User ID/ Order month number/ Platform/ Source/ Promo
    DISTINCT *
  FROM 
    User_Activities_Mulitple_In_Month
  ORDER BY UserID, Order_Month_Number 
),
 
Data_for_Retention_Table AS     -- Data about returning users by cohorts
 
(
  SELECT               -- (Install month number/ Platform/ Source/ Promo/ Order month number/ Numbers)
    coh.Cohort_Month,
    act.Platform,
    act.Source,
    act.Promo,
    act.Order_Month_Number,
    COUNT(1) AS Num_Users
  FROM 
    User_Activities AS act
  LEFT JOIN Install_Cohort AS coh
  ON act.UserID = coh.UserID
  GROUP BY coh.Cohort_Month, act.Platform, act.Source, act.Promo, act.Order_Month_Number
  ORDER BY coh.Cohort_Month, act.Platform, act.Source, act.Promo, act.Order_Month_Number
  
),
 
Retention_Percentage AS 
 
(
SELECT                    -- Final data: divide number of retured users by cohort number
  ret.Cohort_Month,       
  ret.Platform,
  ret.Source,
  ret.Promo,
  siz.Num_Users as Cohort_Size,
  ret.Order_Month_Number,
  ret.Num_Users AS Retained,
  ret.Num_Users * 100/ siz.Num_Users AS Percentage
FROM Data_for_Retention_Table AS ret
LEFT JOIN Cohort_Size AS siz
  ON ret.Cohort_Month = siz.Cohort_Month
  AND ret.Platform = siz.Platform
  AND ret.Source = siz.Source
  AND ret.Promo = siz.Promo
ORDER BY ret.Cohort_Month, ret.Platform, ret.Source, ret.Promo, ret.Order_Month_Number
), 
 
Reveneue_Cost_Transaction AS    -- All data about every order, revenue, costs, date, UserID
 
(
  SELECT
    Install_month,
    Order_Month,
    event_date,
    appsflyer_id AS UserID,
    platform AS Platform,
    media_source AS Source,
    Promo,
    Sum,
    (CASE                                 -- Delivery costs condition (Purchase amount higher than 3000)
      WHEN Sum >= 3000      
        THEN 1000
    ELSE 0
    END)
    AS Delivery_Cost,
    (CASE                                         --Promo-code costs condition
      WHEN promoId = '7525' AND SUM >= 2000      
        THEN 800
      WHEN promoId = '7641' AND SUM >= 1000      
        THEN 600
      WHEN promoId = '7061' AND SUM >= 3000 AND orderNumber = '1'      
        THEN 200
      WHEN promoId = '7937' AND SUM >= 3000      
        THEN 600
      WHEN promoId = '5403' AND SUM >= 1500      
        THEN 600
      ELSE 0
    END)
    AS Promo_Cost
  FROM 
    Purchase_and_CRM
  WHERE platform IS NOT NULL
  AND media_source IS NOT NULL             --Not inclunding rows with NULL data of platform/source/promo
  AND Promo IS NOT NULL
),
 
User_Revenue_Cost AS     --Revenue, delivery and promo-code costs by user by cohorts  
 
(
  SELECT               
    inst.UserID,
    inst.Cohort_Month,
    (pro.Order_Month - inst.Cohort_Month) AS Order_Month_Number,
    inst.Platform,
    inst.Source,
    inst.Promo,
    Sum AS Revenue,
    Delivery_Cost,
    Promo_Cost
  FROM 
    Reveneue_Cost_Transaction AS pro
  INNER JOIN Install_Cohort AS inst
    ON inst.UserID = pro.UserID
  ORDER BY UserID, Order_Month_Number
),
 
Cost_Marketing_per_Source AS             --Marketing costs by Source cohort and month
 
(
  SELECT
    EXTRACT(MONTH FROM Date(date)) AS Cost_Month,
    platform AS Platform,
    media_source AS Source,
    SUM(cost) AS Source_cost,
  FROM `school22_project.cost_data`
  GROUP BY Cost_Month, Platform, Source
  ORDER BY Cost_Month, Platform, Source
),
 
Revenue_Cost_per_Source AS   
 
(
  SELECT                  -- Revenue, delivery and promo-code costs by source cohorts and month
    Cohort_Month,
    Platform,
    Source,
    Order_Month_Number,
    COUNT(Cohort_Month) AS Num_Users,
    SUM(Revenue) AS Revenue,
    SUM(Delivery_Cost) AS Delivery_Cost,
    SUM(Promo_Cost) AS Promo_Cost
  FROM User_Revenue_Cost
  GROUP BY Cohort_Month, Platform, Source, Order_Month_Number
  ORDER BY Cohort_Month, Platform, Source, Order_Month_Number
),
 
Revenue_Cost_per_Source_With_Marketing_Costs AS
 
(
  SELECT        -- Revenue, Marketing costs, delivery and promo-code costs by source cohorts and month 
    rev.Cohort_Month,
    rev.Platform,
    rev.Source,
    rev.Order_Month_Number,
    rev.Num_Users,
    rev.Revenue,
    rev.Delivery_Cost,
    rev.Promo_Cost,
    cost.Source_cost
  FROM 
    Revenue_Cost_per_Source AS rev
  INNER JOIN Cost_Marketing_per_Source AS cost
    ON rev.Order_Month_Number = cost.Cost_Month
    AND rev.Platform = cost.Platform
    AND rev.Source = cost.Source
  ORDER BY rev.Cohort_Month, rev.Platform, rev.Source, rev.Order_Month_Number
),
 
ROI_Per_Source AS                            -- ROI by source cohorts and month 
 
(
  SELECT
    Cohort_Month,
    Platform,
    Source,
    Order_Month_Number,
    Num_Users,
    ((Revenue * 0.35) - Delivery_Cost - Promo_Cost - Source_cost) * 100 / (Delivery_Cost + Promo_Cost + Source_cost)  AS ROI
  FROM Revenue_Cost_per_Source_With_Marketing_Costs
),
 
Revenue_Cost_per_Source_Promo AS            -- Revenue, by cohorts and month
 
(
  SELECT
    Cohort_Month,
    Platform,
    Source,
    Promo,
    Order_Month_Number,
    COUNT(Cohort_Month) AS Num_Users,
    SUM(Revenue) AS Revenue,
    SUM(Delivery_Cost) AS Delivery_Cost,
    SUM(Promo_Cost) AS Promo_Cost
  FROM User_Revenue_Cost
  GROUP BY Cohort_Month, Platform, Source, Promo, Order_Month_Number
  ORDER BY Cohort_Month, Platform, Source, Promo, Order_Month_Number
),
 
LTV_Revenue_Discrete AS                     -- LTV (Revenue) by cohorts and month
 
(
  SELECT
    Cohort_Month,
    Platform,
    Source,
    Promo,
    Order_Month_Number,
    Num_Users,
    Revenue / Num_Users  AS LTV_Revenue
  FROM Revenue_Cost_per_Source_Promo
),
 
LTV_Revenue_Cumulative AS                  -- LTV (Revenue) Cumulative by cohorts and month
 
(
  SELECT
    Cohort_Month,
    Platform,
    Source,
    Promo,
    Order_Month_Number,
    SUM(LTV_Revenue) OVER (PARTITION BY Cohort_Month, Platform, Source, Promo ORDER BY Cohort_Month, Platform, Source, Promo, Order_Month_Number) AS LTV_Revenue_Cumulative
  FROM LTV_Revenue_Discrete
  ORDER BY Cohort_Month, Platform, Source, Promo, Order_Month_Number
),
 
 
LTV_Profit_Discrete AS                   -- LTV (profit) by cohorts and month
 
(
  SELECT
    Cohort_Month,
    Platform,
    Source,
    Promo,
    Order_Month_Number,
    Num_Users,
    (Revenue - Delivery_Cost - Promo_Cost) / Num_Users  AS LTV_Profit
  FROM Revenue_Cost_per_Source_Promo
),
 
LTV_Profit_Cumulative AS                 -- LTV (profit) Cumulative by cohorts and month
 
(
  SELECT
    Cohort_Month,
    Platform,
    Source,
    Promo,
    Order_Month_Number,
    SUM(LTV_Profit) OVER (PARTITION BY Cohort_Month, Platform, Source, Promo ORDER BY Cohort_Month, Platform, Source, Promo, Order_Month_Number) AS LTV_Profit_Cumulative
  FROM LTV_Profit_Discrete
  ORDER BY Cohort_Month, Platform, Source, Promo, Order_Month_Number
)
 
 
SELECT * FROM Retention_Percentage 
(Query to get the data about Retention)
/*
SELECT * FROM Avg_Check_Size_Per_Cohort
(Query to get the data about Average check amount)
SELECT * FROM LTV_Revenue_Cumulative
(Query to get the data about LTV(Revenue))
SELECT * FROM LTV_Profit_Cumulative
(Query to get the data about LTV(profit))
SELECT * FROM ROI_Per_Source
(Query to get the data about ROI)
*/
